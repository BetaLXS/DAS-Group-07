# Decision Tree Model
tree_model <- rpart(rating_above_7 ~ year + length + budget + votes + genre,
data = film_cleaned, method = "class")
#| echo: false
#| warning: false
#| message: false
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(moderndive)
library(skimr)
library(rpart)
library(rpart.plot)
library(randomForest)
# Decision Tree Model
tree_model <- rpart(rating_above_7 ~ year + length + budget + votes + genre,
data = film_cleaned, method = "class")
#| label: data
film <- read.csv("C:/Users/86150/Desktop/dataset07.csv")
# Decision Tree Model
tree_model <- rpart(rating_above_7 ~ year + length + budget + votes + genre,
data = film_clean, method = "class")
# Decision Tree Model
tree_model <- rpart(rating_above_7 ~ year + length + budget + votes + genre,
data = film_clean, method = "class")
#| label: data
film <- read.csv("C:/Users/86150/Desktop/dataset07.csv")
#| label: data
film <- read.csv("dataset07.csv")
View(film)
head(film)
glimpse(film)
summary(film)
#Use the median to fill in missing values (NA)
film_clean <- film %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
film_clean %>%
select(year,length,budget,votes,rating)%>%
cor()
# Decision Tree Model
tree_model <- rpart(rating_above_7 ~ year + length + budget + votes + genre,
data = film_clean, method = "class")
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + length + votes + genre, data = film_clean, family = binomial(link = "logit"))
#Creating a binary variable 'rating_above_7'
film_clean$rating_above_7 <- ifelse(film_clean$rating > 7, 1, 0)
film_clean$genre <- as.factor(film_clean$genre)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + length + votes + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
# Decision Tree Model
tree_model <- rpart(rating_above_7 ~ year + length + budget + votes + genre,
data = film_clean, method = "class")
rpart.plot(tree_model, type=2, extra=4) #visualise the tree
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
print(rf_model)
importance(rf_model)
varImpPlot(rf_model)
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
print(rf_model)
importance(rf_model)
varImpPlot(rf_model)
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
print(rf_model)
importance(rf_model)
varImpPlot(rf_model)
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
print(rf_model)
importance(rf_model)
varImpPlot(rf_model)
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
print(rf_model)
importance(rf_model)
varImpPlot(rf_model)
#Histograms of IMDB ratings
ggplot(film_clean, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
#| echo: false
#| warning: false
#| message: false
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(moderndive)
library(skimr)
library(rpart)
library(rpart.plot)
library(randomForest)
#| label: data
film <- read.csv("dataset07.csv")
View(film)
head(film)
glimpse(film)
summary(film)
#Use the median to fill in missing values (NA)
film_clean <- film %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
film_clean %>%
select(year,length,budget,votes,rating)%>%
cor()
#Histograms of IMDB ratings
ggplot(film_clean, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
#Barplot of Film Counts by Genre
ggplot(film_clean, aes(x = factor(genre))) +
geom_bar(fill = "skyblue", color = "black") +
labs(x = "Genre", y = "Count of Films", title = "Count of Films by Genre")
#Scatterplot of Budget vs Rating
ggplot(film_clean, aes(x = budget, y = rating)) +
geom_point(color = "steelblue") +
labs(x = "Budget (Millions)", y = "IMDB Rating", title = "Rating vs Budget")+
geom_hline(yintercept = 7, linetype = "dashed", color = "red", size = 1)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + length + votes + genre, data = film_clean, family = binomial(link = "logit"))
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
#Random Forest Model
rf_model <- randomForest(rating_above_7~ year + length + budget + votes + genre,
data = film_clean, ntree = 500, importance = TRUE)
#| echo: false
#| warning: false
#| message: false
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(moderndive)
library(skimr)
library(rpart)
library(rpart.plot)
library(randomForest)
#| label: data
film <- read.csv("dataset07.csv")
View(film)
head(film)
glimpse(film)
summary(film)
#Use the median to fill in missing values (NA)
film_clean <- film %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
film_clean %>%
select(year,length,budget,votes,rating)%>%
cor()
#Creating a binary variable 'rating_above_7'
film_clean$rating_above_7 <- ifelse(film_clean$rating > 7, 1, 0)
film_clean$genre <- as.factor(film_clean$genre)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + length + votes + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
residuals <- residuals(logistic_model, type = "deviance")  # 使用偏差残差
leverage <- hatvalues(logistic_model)  # 杠杆值
# 绘制 Residual vs Leverage 图
plot(leverage, residuals,
xlab = "Leverage",
ylab = "Residuals",
main = "Residuals vs Leverage",
pch = 20,
col = "blue")
abline(h = 0, col = "red", lty = 2)  # 添加一条红色的横线，y = 0，表示残差的零水平
# 提取残差、杠杆值和Cook's Distance
residuals <- residuals(logistic_model, type = "deviance")  # 使用偏差残差
leverage <- hatvalues(logistic_model)  # 杠杆值
cooks_d <- cooks.distance(logistic_model)  # Cook's Distance
# 绘制 Residual vs Leverage 图
plot(leverage, residuals,
xlab = "Leverage",
ylab = "Residuals",
main = "Residuals vs Leverage with Cook's Distance",
pch = 20,
col = "blue")
# 添加一条红色的横线，y = 0，表示残差的零水平
abline(h = 0, col = "red", lty = 2)
# Cook's Distance阈值，通常为 4/(n - p - 1) 作为判定标准
n <- nrow(film_clean)  # 样本量
p <- length(coef(logistic_model))  # 模型参数个数
cooks_threshold <- 4 / (n - p - 1)
# 标注 Cook's Distance 大于阈值的点（即异常点）
high_cooks <- cooks_d > cooks_threshold
points(leverage[high_cooks], residuals[high_cooks], col = "green", pch = 19)
# 添加标注，标出异常点（如果需要）
text(leverage[high_cooks], residuals[high_cooks], labels = which(high_cooks), pos = 4, cex = 0.7, col = "darkgreen")
# 提取残差、杠杆值和Cook's Distance
residuals <- residuals(logistic_model, type = "deviance")  # 使用偏差残差
leverage <- hatvalues(logistic_model)  # 杠杆值
cooks_d <- cooks.distance(logistic_model)  # Cook's Distance
# 绘制 Residual vs Leverage 图
plot(leverage, residuals,
xlab = "Leverage",
ylab = "Residuals",
main = "Residuals vs Leverage with Cook's Distance",
pch = 20,
col = "blue")
# 添加一条红色的横线，y = 0，表示残差的零水平
abline(h = 0, col = "red", lty = 2)
# Cook's Distance阈值，通常为 4/(n - p - 1) 作为判定标准
n <- nrow(film_clean)  # 样本量
p <- length(coef(logistic_model))  # 模型参数个数
cooks_threshold <- 4 / (n - p - 1)
# 标注 Cook's Distance 大于阈值的点（即异常点）
#high_cooks <- cooks_d > cooks_threshold
#points(leverage[high_cooks], residuals[high_cooks], col = "green", pch = 19)
# 添加标注，标出异常点（如果需要）
text(leverage[high_cooks], residuals[high_cooks], labels = which(high_cooks), pos = 4, cex = 0.7, col = "darkgreen")
outliers_index <- which(high_residuals | high_cooks)
high_residuals <- abs(residuals) > 3  # 识别残差大于3的异常值
high_cooks <- cooks_d > cooks_threshold  # 识别Cook's Distance大于阈值的异常值
outliers_index <- which(high_residuals | high_cooks)
# 删除异常值
cleaned_data <- film_clean[-outliers_index, ]
# 重新拟合 GLM（广义线性模型），假设模型是逻辑回归
# 在这个示例中，我们假设 `cleaned_data` 包含用于拟合 GLM 的特征变量和目标变量
logistic_model_cleaned <- glm(target_variable ~ predictor_variables,
data = cleaned_data,
family = binomial())
high_residuals <- abs(residuals) > 3  # 识别残差大于3的异常值
high_cooks <- cooks_d > cooks_threshold  # 识别Cook's Distance大于阈值的异常值
outliers_index <- which(high_residuals | high_cooks)
# 删除异常值
cleaned_data <- film_clean[-outliers_index, ]
# 重新拟合 GLM（广义线性模型），假设模型是逻辑回归
# 在这个示例中，我们假设 `cleaned_data` 包含用于拟合 GLM 的特征变量和目标变量
logistic_model_cleaned <- glm(rating_above_7 ~ year+budget + length + votes + genre,
data = film_cleaned,
family = binomial())
high_residuals <- abs(residuals) > 3  # 识别残差大于3的异常值
high_cooks <- cooks_d > cooks_threshold  # 识别Cook's Distance大于阈值的异常值
outliers_index <- which(high_residuals | high_cooks)
# 删除异常值
cleaned_data <- film_clean[-outliers_index, ]
# 重新拟合 GLM（广义线性模型），假设模型是逻辑回归
# 在这个示例中，我们假设 `cleaned_data` 包含用于拟合 GLM 的特征变量和目标变量
logistic_model_cleaned <- glm(rating_above_7 ~ year+budget + length + votes + genre,
data = film_clean,
family = binomial())
# 查看新拟合的模型总结
summary(logistic_model_cleaned)
high_residuals <- abs(residuals) > 3  # 识别残差大于3的异常值
high_cooks <- cooks_d > cooks_threshold  # 识别Cook's Distance大于阈值的异常值
outliers_index <- which(high_residuals | high_cooks)
# 删除异常值
cleaned_data <- film_clean[-outliers_index, ]
# 重新拟合 GLM（广义线性模型），假设模型是逻辑回归
# 在这个示例中，我们假设 `cleaned_data` 包含用于拟合 GLM 的特征变量和目标变量
logistic_model_cleaned <- glm(rating_above_7 ~ year+budget + length + votes + genre,
data = cleaned_data,
family = binomial())
# 查看新拟合的模型总结
summary(logistic_model_cleaned)
summary(cleaned_data)
high_residuals <- abs(residuals) > 3  # 识别残差大于3的异常值
high_cooks <- cooks_d > cooks_threshold  # 识别Cook's Distance大于阈值的异常值
outliers_index <- which(high_residuals | high_cooks)
# 删除异常值
cleaned_data <- film_clean[-outliers_index, ]
# 重新拟合 GLM（广义线性模型），假设模型是逻辑回归
# 在这个示例中，我们假设 `cleaned_data` 包含用于拟合 GLM 的特征变量和目标变量
logistic_model_cleaned <- glm(rating_above_7 ~ year+budget + length + votes + genre,
data = cleaned_data,
family = binomial())
# 查看新拟合的模型总结
summary(logistic_model_cleaned)
dim(cleanded_data)
dim(cleaned_data)
summary(cleaned_data)
plot(logistic_model,which=5)
#Histograms of IMDB ratings
ggplot(film_clean, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
ggplot(film_clean, aes(x = length)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
ggplot(film_clean, aes(x = log(length)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
ggplot(film_clean, aes(x = log(length)) +
ggplot(film_clean, aes(x = log(length))) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
ggplot(film_clean, aes(x = log(rates))) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
ggplot(film_clean, aes(x = log(votes))) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(x = "IMDB Rating", y = "Frequency", title = "Distribution of IMDB Ratings")
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-2116,], family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-c(2116,1922,12),], family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-c(2116,1922,12,337),], family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-c(2116,1922,12,337,731),], family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
plot(logistic_model,which=5)
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-c(2116,1922,12,337,731),], family = binomial(link = "logit"))
summary(logistic_model)
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-c(2116,1922,12,337,731),], family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean[-c(2116,1922,12,337,731),], family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
#logistic GLM
logistic_model <- glm(rating_above_7 ~ year+budget + log(length) + log(votes) + genre, data = film_clean, family = binomial(link = "logit"))
summary(logistic_model)
plot(logistic_model,which=5)
points_to_label <- c(2116, 1922, 12, 337, 731)
leverage <- hatvalues(logistic_model)
residuals <- residuals(logistic_model, type = "deviance")
text(leverage[points_to_label], residuals[points_to_label],
labels = points_to_label, pos = 4, cex = 0.7, col = "red")
